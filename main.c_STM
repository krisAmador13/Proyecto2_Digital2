/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>   // Para manejo de cadenas
#include <stdlib.h>   // Para convertir cadenas a enteros
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

char sensor[2];
char opcion[64];
char opcion2[64];
char seleccion;
char sel[100];
int mostrarMenu = 0;
uint8_t TX_Buffer[] = "0";
uint8_t RX_Buffer[3];
char led_sel[10];       // Buffer para recibir la cadena completa (n,m)
char LED[2];            // Almacena el número del LED (1 dígito)
char Tiempo[5];         // Almacena el tiempo (hasta 4 dígitos)
int eleccion = 0;      // Número del LED seleccionado
int tiempo;
char msg[];
char tx_buffer[20];  // Buffer para enviar datos
#define deviceAddress 0x055






/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void Menu(void);
void Seleccion_LEDS(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(mostrarMenu==0){
		  Menu();
		  HAL_Delay(3000);
		  mostrarMenu=1;
	  }
	  if(seleccion=='1'){
		  HAL_GPIO_WritePin(ESP32_CS_GPIO_Port,ESP32_CS_Pin,GPIO_PIN_RESET);
		  Seleccion_LEDS();
		  HAL_Delay(50);
		  HAL_GPIO_WritePin(ESP32_CS_GPIO_Port,ESP32_CS_Pin,GPIO_PIN_SET);
		  mostrarMenu=0;
		  seleccion='0';


	  }
	  if(seleccion=='2'){
		  TX_Buffer[0]='0';
		  sprintf(sel, "La medicion del sensor es:\n");
		  HAL_UART_Transmit(&huart2, (uint8_t*)sel, strlen(sel), HAL_MAX_DELAY);
		  HAL_I2C_Master_Transmit(&hi2c1,(deviceAddress<<1)|0x00,TX_Buffer,2,HAL_MAX_DELAY);
		  TX_Buffer[0]='2';
		  HAL_I2C_Master_Transmit(&hi2c1,(deviceAddress<<1)|0x00,TX_Buffer,2,HAL_MAX_DELAY);
		  HAL_Delay(100);
		  HAL_I2C_Master_Receive(&hi2c1,(deviceAddress<<1)|0x03,(uint8_t*)RX_Buffer,3,HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2,RX_Buffer,sizeof(RX_Buffer),100);
		  HAL_Delay(500);
		  mostrarMenu=0;
		  seleccion='0';
	  }



	  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_CS_GPIO_Port, ESP32_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ESP32_CS_Pin */
  GPIO_InitStruct.Pin = ESP32_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ESP32_CS_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void Menu(void){
	sprintf(opcion, "¿Controlar dispositivo SPI\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)opcion, strlen(opcion), HAL_MAX_DELAY);
	sprintf(opcion2, "¿Obtener medición de Sensor I2C\n");
	HAL_UART_Transmit(&huart2, (uint8_t*)opcion2, strlen(opcion2), HAL_MAX_DELAY);
	HAL_Delay(2000);
	HAL_UART_Receive(&huart2, &seleccion, sizeof(seleccion), 8);

}

void Seleccion_LEDS(void) {//Funcion para recibir datos de led y tiempo de encendido 
    // Limpiar el buffer antes de recibir datos
    memset(led_sel, 0, sizeof(led_sel));

    // Enviar mensaje solicitando entrada al usuario
    char msg[] = "Ingrese LED y tiempo en formato n,m (Ej: 1,500):\n";
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

    uint8_t index = 0;
    char c;

    // Leer datos por UART hasta Enter
    while (index < sizeof(led_sel) - 1) {
        if (HAL_UART_Receive(&huart2, (uint8_t*)&c, 1, HAL_MAX_DELAY) == HAL_OK) {
            if (c == '\n') break;
            led_sel[index++] = c;
        }
    }
    led_sel[index] = '\0';  // Terminar la cadena

    // Validar y procesar los datos
    char *coma = strchr(led_sel, ',');
    if (coma != NULL) {
        strncpy(LED, led_sel, coma - led_sel);
        LED[coma - led_sel] = '\0';  // Terminar la cadena
        strncpy(Tiempo, coma + 1, sizeof(Tiempo) - 1);

        eleccion = atoi(LED);
        tiempo = atoi(Tiempo);

        if ((eleccion >= 1 && eleccion <= 3) && (tiempo > 0 && tiempo <= 9999)) {
            // Preparar los datos para enviarlos por SPI
            sprintf(tx_buffer, "%d,%d", eleccion, tiempo);

            // Enviar los datos por SPI al ESP32
            HAL_SPI_Transmit(&hspi1, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);

            // Confirmación por UART
            char buffer[50];
            sprintf(buffer, "Enviando: LED=%d, Tiempo=%d ms\n", eleccion, tiempo);
            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
        } else {
            char error[] = "Error: LED debe ser 1-3 y tiempo entre 1 y 9999.\n";
            HAL_UART_Transmit(&huart2, (uint8_t*)error, strlen(error), HAL_MAX_DELAY);
        }
    } else {
        char error[] = "Formato inválido. Use el formato n,m (Ej: 1,500).\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)error, strlen(error), HAL_MAX_DELAY);
    }
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
